{% extends 'layout.twig' %}

{% block body %}
	<div id="chatteroids"></div>
	<script>
		var Width = 1200, Height = 800;

		var config = {
			type: Phaser.AUTO,
			width: Width,
			height: Height,
    	// transparent: true,
			parent: 'chatteroids',
			physics: {
					default: 'arcade',
					arcade: {
							// debug: true,
							// gravity: { y: 200 }
					}
			},
			scene: {
					preload: preload,
					create: create,
					update: update
			}
		};

		var game = new Phaser.Game(config);
		var graphics;
		var debug = false;
		var phaser = undefined;
		var collisions;
		var colliders = {};
		var balls = {};
		var winners = {};
		var refreshTimer = null;
		const PI = 3.1415926535;
		var botVelocity = 300;
		var turnSpeed = PI;
		var maxAngle = 60 * ( 2 * PI / 360 );
		var lastBotUpdateTime = 0;
		var line;
		var numCollisions = 0;
		var timePassedInMinutes = 0;
		var collisionText;
		var net = new brain.NeuralNetwork();
		var trainData = [];
		var trainMax = 1000;

		var pikachus = [];
		var numPikas = 30;
		var pikaState = "idle"; // "idle", "left", "right"
		var previousRayVals = -1;

		function aiCompute( rayVals ) {
			var rayMax = 0;
			var numCasts = rayVals.length;
			for( var i = 0; i < numCasts; i++ ) {
				var factor = i / ( numCasts - 1 );
				var mid = ( numCasts - 1 ) / 2;
				var change = ( mid - Math.abs( i - mid ) ) / mid;
				rayMax += 200 * change + 100;
			}

			var total = 0, leftTotal = 0, rightTotal = 0;
			for( var i = 0, len = rayVals.length / 2; i < len; i++ ) {
				leftTotal += rayVals[ i ];
			}
			for( var i = Math.floor( rayVals.length / 2 ), len = rayVals.length; i < len; i++ ) {
				rightTotal += rayVals[ i ];
			}
			total = rayVals.reduce( (a, b) => a + b );
			// console.log( "left: " + leftTotal );
			// console.log( "right: " + rightTotal );
			if( total > 0 && total < rayMax - 10 ) {

				if( total < rayMax / 2 ) { // Too close to everything so try and turn left
					pikaState = "left";
				}
				else if( leftTotal > rightTotal ) {
					pikaState = "left";
				}
				else {
					pikaState = "right";
				}
			}
			else {
				pikaState = "idle";
			}

			// switch( pikaState ) {
			// case "idle":
			// 	if( total > 0 && total < rayMax - 10 ) {
			// 		// Turn in a direction
			// 		if( leftTotal > rightTotal ) {
			// 			pikaState = "left";
			// 		}
			// 		else {
			// 			pikaState = "right";
			// 		}
			// 	}
			// 	break;
			// case "left":
			// 	if( previousRayVals < total - 50 ) {
			// 		pikaState = "idle";
			// 	}
			// 	break;
			// case "right":
			// 	if( previousRayVals < total - 50 ) {
			// 		pikaState = "idle";
			// 	}
			// 	break;
			// }
			previousRayVals = total;
			switch( pikaState ) {
				case "left":
					return -90;
				case "right":
					return 90;
				case "idle":
				default:
					return 0;
			}
		}

		function aiComputeSim( index ) {
			var pokeballs = [];
			for( ball in balls ) {
				var obj = balls[ ball ];
				pokeballs.push({
					x: obj.object.x,
					y: obj.object.y,
					vx: obj.object.body.velocity.x,
					vy: obj.object.body.velocity.y,
				});
			}
			var rays = rayPika( pikachus[ index ], pokeballs, 0, 0.0 );
			var raySum = rays.reduce( (a, b) => a + b );
			var scorePreSim = {
				left45: raySum,
				straight: raySum,
				right45: raySum,
			}
			pokeballs = simulate( pokeballs, 0.15 );
			var scores = {
				left45: scorePreSim[ "left45" ] * -1 + rayPika( pikachus[ index ], pokeballs, -PI / 2, 0.15 ).reduce( (a, b) => a + b ),
				straight: scorePreSim[ "straight" ] * -1 + rayPika( pikachus[ index ], pokeballs, 0, 0.15 ).reduce( (a, b) => a + b ),
				right45: scorePreSim[ "right45" ] * -1 + rayPika( pikachus[ index ], pokeballs, PI / 2, 0.15 ).reduce( (a, b) => a + b ),
			}
			console.log( scores );
			var maxScore = Object.keys( scores ).reduce( (a, b) => ( scores[ a ] > scores[ b ] ? a : b ) );
			console.log( maxScore );
			if( Object.keys( balls ).length > 10 ) {
				// console.log( rays.map( x => x / 1000 ) );
				var normalizedScores = Object.keys( scores ).map( x => scores[ x ] / 10000 + 0.5 );
				console.log( normalizedScores );
				trainData.push( {
					input: normalizedScores,//rays.map( x => x / 1000 ),
					output: { [maxScore]: 1 }
				});
			}
			if( trainData.length >= trainMax ) {
				var sample = getRandomSubset( trainData, 300 );
				net.train( sample, {
					log: ( x => console.log( x ) )
				} );
				// console.log( waaa.waa.waa );
			}
			switch( maxScore ) {
				case "left45": return -90;
				case "straight": return 0;
				case "right45": return 90;
				default: return 0;
			}
		}

		function aiComputeNN( index ) {
			var pokeballs = [];
			for( ball in balls ) {
				var obj = balls[ ball ];
				pokeballs.push({
					x: obj.object.x,
					y: obj.object.y,
					vx: obj.object.body.velocity.x,
					vy: obj.object.body.velocity.y,
				});
			}
			var rays = rayPika( pikachus[ index ], pokeballs, 0, 0.0 );
			var raySum = rays.reduce( (a, b) => a + b );
			var scorePreSim = {
				left45: raySum,
				straight: raySum,
				right45: raySum,
			}
			pokeballs = simulate( pokeballs, 0.15 );
			var scores = {
				left45: scorePreSim[ "left45" ] * -1 + rayPika( pikachus[ index ], pokeballs, -PI / 2, 0.15 ).reduce( (a, b) => a + b ),
				straight: scorePreSim[ "straight" ] * -1 + rayPika( pikachus[ index ], pokeballs, 0, 0.15 ).reduce( (a, b) => a + b ),
				right45: scorePreSim[ "right45" ] * -1 + rayPika( pikachus[ index ], pokeballs, PI / 2, 0.15 ).reduce( (a, b) => a + b ),
			}
			var normalizedScores = Object.keys( scores ).map( x => scores[ x ] / 10000 + 0.5 );
			var output = net.run( normalizedScores );// rays.map( x => x / 1000 ) );
			var calculated = Object.keys( output ).reduce( (a, b) => output[ a ] > output[ b ] ? a : b );
			console.log( calculated );
			switch( calculated ) {
				case "left45": return -90;
				case "straight": return 0;
				case "right45": return 90;
				default: return 0;
			}
		}

		function rayPika( pikaBot, pokeballs, angle, timestep ) {
			angle *= timestep * turnSpeed;
			var pika = {
				x: pikaBot.x + botVelocity * Math.cos( pikaBot.dir + angle ) * timestep,
				y: pikaBot.y + botVelocity * Math.sin( pikaBot.dir + angle ) * timestep
			};
			var rayVals = [];
			var numCasts = 11;
			for( var i = 0; i < numCasts; i++ ) {
				var factor = i / ( numCasts - 1 );
				var mid = ( numCasts - 1 ) / 2;
				var change = ( mid - Math.abs( i - mid ) ) / mid;
				rayVals.push( botRaycast( pokeballs, pika.x, pika.y, pikaBot.dir + angle - PI / 2 + factor * PI, 200 * change + 100 ) );
			}
			return rayVals;
		}

		function simulate( pokeballs, timestep ) {
			var newBalls = [];
			for( var i = 0, len = pokeballs.length; i < len; i++ ) {
				var ball = pokeballs[ i ];
				ball.x += ball.vx * timestep;
				ball.y += ball.vy * timestep;
				newBalls.push( ball );
			}
			return newBalls;
		}

		function preload ()
		{
			this.load.image('moon', 'images/moon.png');
			this.load.image('wizball', 'images/pika.png');
			this.load.image('peg', 'images/peg.png');
			this.load.image('wall', 'images/wall.png');
			this.load.image('star', 'images/star.png');
		}

		function create ()
		{
			phaser = this;
			graphics = this.add.graphics({ lineStyle: { width: 4, color: 0xaa00aa } });
			this.game.antialias = true;
			this.game.clearBeforeRender = true;
			collisionText = this.add.text( 20, 20, "Collisions: 0" );
			collisionText.setScale( 2 );
			console.log( collisionText );
			startGame();
			// for( var i = 0; i < 1; i++ ) {
			// 	addUser( "test_" + i );
			// }
			$("#chatteroids").show();
			numCollisions = 0;
		}

		function botRaycast( pokeballs, pX, pY, angle, maxRayLength = 300 ) {
			if( pX <= 0 || pX >= Width ) return 0;
			if( pY <= 0 || pY >= Height ) return 0;
			var dX = Math.cos( angle ), dY = Math.sin( angle );
			var pX1 = pX + dX * maxRayLength, pY1 = pY + dY * maxRayLength;
			if( !line ) {
				line = new Phaser.Geom.Line( pX, pY, pX1, pY1 );
			}
			var closestMarbleDist = maxRayLength * 2;
			for( var marble in pokeballs ) {
				var marbleObj = pokeballs[ marble ];
				var distToMarble = distToSegment( { x: marbleObj.x, y: marbleObj.y }, { x: pX, y: pY }, { x: pX1, y: pY1 } );
				var circle = new Phaser.Geom.Circle( marbleObj.x, marbleObj.y, 32 );
				// graphics.strokeCircleShape(circle);
				if( distToMarble < 32 ) {
					// Intersected!
					var cX = marbleObj.x, cY = marbleObj.y;
					var vX = cX - pX, vY = cY - pY;
					var vLen = Math.sqrt( vX * vX + vY * vY ) - 32;
					// graphics.strokeCircleShape(circle);
					if( vLen < closestMarbleDist ) {
						closestMarbleDist = vLen;
					}
				}
			}
			if( closestMarbleDist < maxRayLength ) {
				if( debug ) {
					var appxX = pX + dX * closestMarbleDist, appxY = pY + dY * closestMarbleDist;
					line.setTo( pX, pY, appxX, appxY );
					graphics.strokeLineShape( line );
				}
				return closestMarbleDist;
			}
			// console.log( "no intersect" );
			// Check against walls
			if( pX1 < 0 ) {
				var y = pY - ( dY / dX ) * pX;
				var distToWall = Math.sqrt( pX * pX + ( y - pY ) * ( y - pY ) );
				if( debug ) {
					line.setTo( pX, pY, pX + dX * distToWall, pY + dY * distToWall );
					graphics.strokeLineShape( line );
				}
				return distToWall;
			}
			if( pX1 > Width ) {
				var x = Width - pX;
				var y = pY - ( dY / dX ) * x;
				var distToWall = Math.sqrt( x * x + ( y - pY ) * ( y - pY ) );
				if( debug ) {
					line.setTo( pX, pY, pX + dX * distToWall, pY + dY * distToWall );
					graphics.strokeLineShape( line );
				}
				return distToWall;
			}
			if( pY1 < 0 ) {
				var y = pX - ( dX / dY ) * pY;
				var distToWall = Math.sqrt( pY * pY + ( y - pX ) * ( y - pX ) );
				if( debug ) {
					line.setTo( pX, pY, pX + dX * distToWall, pY + dY * distToWall );
					graphics.strokeLineShape( line );
				}
				return distToWall;
			}
			if( pY1 > Height ) {
				var y = pX - ( dX / dY ) * ( Height - pY );
				var distToWall = Math.sqrt( ( Height - pY ) * ( Height - pY ) + ( y - pX ) * ( y - pX ) );
				if( debug ) {
					line.setTo( pX, pY, pX + dX * distToWall, pY + dY * distToWall );
					graphics.strokeLineShape( line );
				}
				return distToWall;
			}
			if( debug ) {
				line.setTo( pX, pY, pX1, pY1 );
				graphics.strokeLineShape( line );
			}
			return maxRayLength;
		}

		function botTurn( pikaBot, angle ) {
			var angleRads = angle * ( 2 * PI / 360 );
			if( angleRads < -maxAngle ) {
				angleRads = -maxAngle;
			}
			if( angleRads > maxAngle ) {
				angleRads = maxAngle;
			}
			pikaBot.dir += angleRads;
			if( pikaBot.dir < -PI * 2 ) {
				pikaBot.dir += PI * 2;
			}
			if( pikaBot.dir > PI * 2 ) {
				pikaBot.dir -= PI * 2;
			}
		}

		function update(time, delta) {
			timePassedInMinutes += delta / 1000 / 60;
			var collisionsPerMinute = ( numCollisions / timePassedInMinutes ).toFixed( 2 );
			var pokemaster = "";
			if( Object.keys( winners ).length > 0 ) {
				pokemaster = Object.keys( winners ).reduce( (a, b) => winners[ a ] > winners[ b ] ? a : b );
			}
			collisionText.setText( "Pokeballs: " + Object.keys( balls ).length + "\nPokeMaster: " + pokemaster + "(" + winners[ pokemaster ] + ")\nTime: " + timePassedInMinutes.toFixed( 2 ) + "\nCollisions / Min: " + collisionsPerMinute );
			if( time - 50 > lastBotUpdateTime ) {
				graphics.clear();
				var timeFactor = 0.001 * ( time - lastBotUpdateTime );//0.05;
				// console.log( timeFactor );
				for( var index = 0; index < numPikas; index++ ) {
					var rayVals = [];
					var numCasts = 11;
					var pokeballs = [];
					for( ball in balls ) {
						var obj = balls[ ball ];
						pokeballs.push({
							x: obj.object.x,
							y: obj.object.y,
							vx: obj.object.body.velocity.x,
							vy: obj.object.body.velocity.y,
						});
					}
					for( var i = 0; i < numCasts; i++ ) {
						var factor = i / ( numCasts - 1 );
						var mid = ( numCasts - 1 ) / 2;
						var change = ( mid - Math.abs( i - mid ) ) / mid;
						rayVals.push( botRaycast( pokeballs, pikachus[ index ].x, pikachus[ index ].y, pikachus[ index ].dir - PI / 2 + factor * PI, 200 * change + 100 ) );
					}
					// var turnAngle = aiCompute( rayVals );
					var turnAngle;
					if( trainData.length < trainMax ) {
						 turnAngle = aiComputeSim( index );
					}
					else {
						turnAngle = aiComputeNN( index );
					}
					botTurn( pikachus[ index ], turnAngle * turnSpeed * timeFactor );
					pikachus[ index ].setVelocity( botVelocity * Math.cos( pikachus[ index ].dir ), botVelocity * Math.sin( pikachus[ index ].dir ) );
					// bot.setVelocity( 0, 0 );
					pikachus[ index ].setAngle( 270 + pikachus[ index ].dir * ( 360 / ( 2 * PI ) ) );
				}
				lastBotUpdateTime = time;
			}

			for( var marble in balls ) {
				var marbleObj = balls[ marble ];
				marbleObj.text.x = marbleObj.object.x;
				marbleObj.text.y = marbleObj.object.y - 35;
			}
		}

		function startGame() {
			collisions = phaser.physics.add.group({
				// bounceX: 0.95, bounceY: 0.6,
				bounceX: 1, bounceY: 1,
				collideWorldBounds: true
			});
			for( var i = 0; i < numPikas; i++ ) {
				pikachus.push( phaser.physics.add.image( 200 * Math.random() + 300, 200 * Math.random() + 300, "wizball" ) );
				pikachus[ i ].dir = 0;
				pikachus[ i ].setOrigin( 0.5 );
				pikachus[ i ].setCircle( 16 );
				pikachus[ i ].setBounce( 1 );
				pikachus[ i ].setCollideWorldBounds(true);
			}
		}

		function addUser( username ) {
			if( !balls[ username ] ) {
				numCollisions = 0;
				timePassedInMinutes = 0;
				var dropPosition = getRandomInt(768);
				// var userMarble = phaser.physics.add.image(dropPosition, 65, 'wizball');
				// var userMarble = collisions.create(dropPosition, -165, 'moon');
				var userMarble = collisions.create(450, 380, 'moon');
				var userText = phaser.add.text(dropPosition, -190, username);
				userText.setOrigin( 0.5 );
				userMarble.name = username;
				userMarble.setCircle(32);
				userMarble.setDrag( 0, 0 );
				userMarble.body.allowDrag = false;
				// userMarble.body.stopVelocityOnCollide = false;
				userMarble.allowRotation = true;
				// userMarble.setMass( 10 );
				// userMarble.setCollideWorldBounds(true);
				userMarble.setBounce(1);
				userMarble.setVelocity(getRandomInt(600)-300, getRandomInt(200));
				// userMarble.setVelocity(0, 0);
				colliders[ username ] = phaser.physics.add.collider(userMarble, collisions);
				// phaser.physics.add.collider(userMarble, walls, (marble, block) => {
				// 	if( !marble.body.isMoving && marble.y < block.y ) {
				// 		marble.setVelocity( getRandomInt( 200 ) - 100, -20 );
				// 	}
				// });
				// phaser.physics.add.collider(userMarble, blocks, (marble, block) => {
				// 	if( !marble.body.isMoving && marble.y < block.y ) {
				// 		marble.setVelocity( ( getRandomInt( 100 ) + 20 ) * ( marble.x < block.x ? -1 : 1 ), -100 );
				// 	}
				// });
				phaser.physics.add.collider( userMarble, pikachus, ( marble, pika ) => {
					numCollisions++;
					console.log( marble.name + " collided with Pikachu!" );
					winners[ marble.name ] = ( winners[ marble.name ] || 0 ) + 1;
				});
				balls[ username ] = {
					text: userText,
					object: userMarble
				}
			}
		}

		function getRandomInt(max) {
		  return Math.floor(Math.random() * Math.floor(max));
		}

		function getRandomSubset(arr, n) {
	    var result = new Array(n),
	        len = arr.length,
	        taken = new Array(len);
	    if (n > len)
	        throw new RangeError("getRandom: more elements taken than available");
	    while (n--) {
	        var x = Math.floor(Math.random() * len);
	        result[n] = arr[x in taken ? taken[x] : x];
	        taken[x] = --len in taken ? taken[len] : len;
	    }
	    return result;
	}

		function sqr(x) { return x * x }
		function dist2(v, w) { return sqr(v.x - w.x) + sqr(v.y - w.y) }
		function distToSegmentSquared(p, v, w) {
		  var l2 = dist2(v, w);
		  if (l2 == 0) return dist2(p, v);
		  var t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2;
		  t = Math.max(0, Math.min(1, t));
		  return dist2(p, { x: v.x + t * (w.x - v.x),
		                    y: v.y + t * (w.y - v.y) });
		}
		function distToSegment(p, v, w) { return Math.sqrt(distToSegmentSquared(p, v, w)); }

		var client = null;

		$( document ).ready(function() {
			$("#chatteroids").hide();

			var options = {
				options: {
					debug: false
				},
				connection: {
					reconnect: true,
				},
				identity: {
					username: "{{ username }}",
				    password: "{{ oauth }}"
				},
				channels: ["#{{ username }}"]
			};

			client = new tmi.client(options);

			// Connect the client to the server..
			client.connect();

			client.on("chat", function (channel, userstate, message, self) {
				if( message == "!boost" ) {
					if( balls[ userstate[ "display-name" ] ] ) {
						var pokeball = balls[ userstate[ "display-name" ] ];
						var speed = Math.sqrt( pokeball.object.body.velocity.x * pokeball.object.body.velocity.x +
							pokeball.object.body.velocity.y * pokeball.object.body.velocity.y );
						var dX = pokeball.object.body.velocity.x / speed;
						var dY = pokeball.object.body.velocity.y / speed;
						pokeball.object.setVelocity(
							pokeball.object.body.velocity.x + dX * 100,
							pokeball.object.body.velocity.y + dY * 100
						);
					}
				}
				if( message == "!pewpew" || message == "!neurowaa" ) {
					addUser( userstate["display-name"] );

					$("#chatteroids").show();
					if( refreshTimer ) {
						clearTimeout( refreshTimer );
					}
					// refreshTimer = setTimeout(() => {
					// 	location.reload();
					// }, 120000);
				}
			});
		});
	</script>
{% endblock %}
